<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.ccclll777.alldocsbackend.dao.TagDao">
  <resultMap id="BaseResultMap" type="org.ccclll777.alldocsbackend.entity.Tag">
      <result column="id" property="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <result column="name" property="name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <result column="description" property="description" javaType="java.lang.String" jdbcType="VARCHAR" />
      <result column="user_id" property="userId" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <result column="create_time" property="createTime" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <result column="update_time" property="updateTime" javaType="java.util.Date" jdbcType="TIMESTAMP" />
  </resultMap>


    <insert id="insertTag" useGeneratedKeys="true" keyProperty="id" parameterType="org.ccclll777.alldocsbackend.entity.Tag" >
        insert into tag (name,description,create_time,update_time,user_id)
        values (#{name,jdbcType=VARCHAR},
                #{description,jdbcType=VARCHAR},
                #{createTime,jdbcType=TIMESTAMP},
                #{updateTime,jdbcType=TIMESTAMP},
                #{userId,jdbcType=INTEGER}
               )
    </insert>

    <update id="updateTag" parameterType="org.ccclll777.alldocsbackend.entity.Tag" >
        update tag set name = #{name,jdbcType=VARCHAR},
                            description = #{description,jdbcType=VARCHAR},
                            create_time = #{createTime,jdbcType=TIMESTAMP},
                            update_time = #{updateTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <delete id="deleteTag" parameterType="java.lang.Integer" >
        delete from tag where id = #{tagId,jdbcType=INTEGER}
    </delete>

    <select id="selectTagList" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select id,name,description,user_id,create_time,update_time from tag order by id limit #{limit,jdbcType=INTEGER} offset #{offset,jdbcType=INTEGER}
    </select>
    <select id="tagCount" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        select count(id) from tag
    </select>
    <select id="haveTag" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(id) from tag where name = #{tagName,jdbcType=VARCHAR}
    </select>
    <select id="selectTagByName" parameterType="java.lang.String" resultMap="BaseResultMap">
        select id,name,description,user_id,create_time,update_time from tag where name = #{tagName,jdbcType=VARCHAR}
    </select>


</mapper>